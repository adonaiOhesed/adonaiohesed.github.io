<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-07-06T06:50:14+09:00</updated><id>http://localhost:4000/</id><title type="html">H.Choi</title><subtitle>Room for me.
</subtitle><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><entry><title type="html">Openssl로 인증서 생성</title><link href="http://localhost:4000/2019/05/18/openssl.html" rel="alternate" type="text/html" title="Openssl로 인증서 생성" /><published>2019-05-18T00:00:00+09:00</published><updated>2019-05-18T00:00:00+09:00</updated><id>http://localhost:4000/2019/05/18/openssl</id><content type="html" xml:base="http://localhost:4000/2019/05/18/openssl.html">&lt;h2 id=&quot;인증서-생성하기-전-작업&quot;&gt;인증서 생성하기 전 작업&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;인증서 폴더 생성 후 읽기 및 실행 권한 부여.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir /etc/pki/root
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/pki/root/
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; chmod 555 /etc/pki/root
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; chmod 555 /etc/pki/root/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ip를-추가하기-위한-파일-생성&quot;&gt;IP를 추가하기 위한 파일 생성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;IP 주소가 작성된 파일을 생성한다.&lt;/li&gt;
  &lt;li&gt;인증서에 IP를 추가하지 않을 경우 metricbeat 등 추가적인 연결프로그램에 대하여 IP 접근이 막히는 에러가 발생한다. - 에러는 아래와 같다
&amp;lt;/&amp;gt;&lt;/li&gt;
  &lt;li&gt;x509: cannot validate certificate for &amp;lt;ip&amp;gt; because it doesn’t contain any ip SANs
&amp;lt;/&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; vi extfile.cnf
&lt;span class=&quot;go&quot;&gt;
subjectAltName = IP:192.168.0.85, IP:192.168.0.86, IP:192.168.0.87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서버용-ca-생성&quot;&gt;서버용 CA 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CA에 대한 비밀번호를 입력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl genrsa &lt;span class=&quot;nt&quot;&gt;-des3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.cakey.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Openssl 을 이용한 CA 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서버-ca-를-통하여-공개키-생성&quot;&gt;서버 CA 를 통하여 공개키 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; server.cakey.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; root.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서버-개인-키-생성&quot;&gt;서버 개인 키 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.key 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서버-csr-생성&quot;&gt;서버 csr 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; server.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서버-crt-생성&quot;&gt;서버 crt 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;일전에 생성한 extfile.cnf 를 -extfile 명령어를 이용하여 추가해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; server.csr &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 3650 &lt;span class=&quot;nt&quot;&gt;-sha1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; root.crt &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; server.cakey.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.crt &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; extfile.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클라이언트-키-생성&quot;&gt;클라이언트 키 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클라이언트-csr-생성&quot;&gt;클라이언트 csr 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; client.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클라이언트-crt-생성&quot;&gt;클라이언트 crt 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; client.csr &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 3650 &lt;span class=&quot;nt&quot;&gt;-sha1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; root.crt &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; server.cakey.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.crt &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; extfile.cnf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="openssl" /><category term="certificates" /><summary type="html">인증서 생성하기 전 작업 인증서 폴더 생성 후 읽기 및 실행 권한 부여. $ mkdir /etc/pki/root $ cd /etc/pki/root/ $ chmod 555 /etc/pki/root $ chmod 555 /etc/pki/root/* IP를 추가하기 위한 파일 생성 IP 주소가 작성된 파일을 생성한다. 인증서에 IP를 추가하지 않을 경우 metricbeat 등 추가적인 연결프로그램에 대하여 IP 접근이 막히는 에러가 발생한다. - 에러는 아래와 같다 &amp;lt;/&amp;gt; x509: cannot validate certificate for &amp;lt;ip&amp;gt; because it doesn’t contain any ip SANs &amp;lt;/&amp;gt; $ vi extfile.cnf subjectAltName = IP:192.168.0.85, IP:192.168.0.86, IP:192.168.0.87 서버용 CA 생성 CA에 대한 비밀번호를 입력한다. $ openssl genrsa -des3 -out server.cakey.pem Openssl 을 이용한 CA 생성 서버 CA 를 통하여 공개키 생성 $ openssl req -new -x509 -key server.cakey.pem -out root.crt 서버 개인 키 생성 $ openssl genrsa -out server.key 서버 csr 생성 $ openssl req -new -key server.key -out server.csr 서버 crt 생성 일전에 생성한 extfile.cnf 를 -extfile 명령어를 이용하여 추가해준다. $ openssl x509 -req -in server.csr -days 3650 -sha1 -CAcreateserial -CA root.crt -CAkey server.cakey.pem -out server.crt -extfile extfile.cnf 클라이언트 키 생성 $ openssl genrsa -out client.key 클라이언트 csr 생성 $ openssl req -new -key client.key -out client.csr 클라이언트 crt 생성 $ openssl x509 -req -in client.csr -days 3650 -sha1 -CAcreateserial -CA root.crt -CAkey server.cakey.pem -out client.crt -extfile extfile.cnf</summary></entry><entry><title type="html">인증서</title><link href="http://localhost:4000/2019/05/18/certificates.html" rel="alternate" type="text/html" title="인증서" /><published>2019-05-18T00:00:00+09:00</published><updated>2019-05-18T00:00:00+09:00</updated><id>http://localhost:4000/2019/05/18/certificates</id><content type="html" xml:base="http://localhost:4000/2019/05/18/certificates.html">&lt;h2 id=&quot;keystore란-무엇인가&quot;&gt;Keystore란 무엇인가?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;priavate key가 담겨있는 정보(텍스트 파일)를 의미한다.&lt;/li&gt;
  &lt;li&gt;keystore에서 제공하는 operation으로만 key 접근이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;pkcs12&quot;&gt;PKCS#12&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;공개 키 암호 표준(Public-Key Cryptography Standard, PKCS)은 RSA 시큐리티에서 정한, 공개 키 암호에 대한 사용 방식에 대한 표준 프로토콜이다.&lt;/li&gt;
  &lt;li&gt;공개 키 인증서 교환 문법 표준(Personal Information exchange syntax standard)&lt;/li&gt;
  &lt;li&gt;비밀번호로 보호된, 대칭키와 공개 키 인증서에 동봉된 개인 키들을 저장하는 데 일반적으로 사용되는 파일 형식을 정의한다. .pfx는 pkcs #12 파일형식 확장자이다.
이 파일 형식은 여러 개의 개체(예: 다중 인증서, 다중 키)를 포함할 수 있으며 보통, 비밀번호로 보호되거나 암호화된,. java keystore의 형식으로 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;인증서&quot;&gt;인증서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인증서 안에는 public information, public key가 들어있다.&lt;/li&gt;
  &lt;li&gt;CA로부터 받은 public key가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;인증서-관련-용어-정리&quot;&gt;인증서 관련 용어 정리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rootca.or.kr/kcac/down/TechSpec/1.3-KCAC.TS.DN.pdf&quot;&gt;전자서명인증관리체계 DN 규격&lt;/a&gt; 참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CN (Common Name): 가입자의 이름을 나타내는 속성&lt;/li&gt;
  &lt;li&gt;OU (Organizational Unit Name): 가입자가 속한 하위 조직명을 나타내기 위한 속성, 공인인증기관일 경우 CA를 사용&lt;/li&gt;
  &lt;li&gt;O (Organization Name): 가입자가 속한 조직명을 나타내기 위한 속성&lt;/li&gt;
  &lt;li&gt;DC (Domain Component): 가입자의 도메인 주소를 나타내기 위한 속성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인증서-확장자&quot;&gt;인증서 확장자&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;.pem: X.509 v3 파일의 한 형태&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;x509란&quot;&gt;X.509란&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;공개키 인증서를 사용하기 위해서는 어떤 표준이 있어야 되는 것인데 현재 널리 사용하고 있는 표준이 X.509이다.&lt;/li&gt;
  &lt;li&gt;X.509의 표준을 사용하여 만든 인증서를 X.509 인증서라고 부른다.&lt;/li&gt;
  &lt;li&gt;Extensino항목은 중요한 것만 기입했다.
&lt;img src=&quot;/assets/images/x509_1.png&quot; width=&quot;600px&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;위의 항목 중 DN형식이 있는데 DN의 항목은 다음과 같다.
&lt;img src=&quot;/assets/images/x509_2.png&quot; width=&quot;600px&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="certificates" /><summary type="html">Keystore란 무엇인가? priavate key가 담겨있는 정보(텍스트 파일)를 의미한다. keystore에서 제공하는 operation으로만 key 접근이 가능하다. PKCS#12 공개 키 암호 표준(Public-Key Cryptography Standard, PKCS)은 RSA 시큐리티에서 정한, 공개 키 암호에 대한 사용 방식에 대한 표준 프로토콜이다. 공개 키 인증서 교환 문법 표준(Personal Information exchange syntax standard) 비밀번호로 보호된, 대칭키와 공개 키 인증서에 동봉된 개인 키들을 저장하는 데 일반적으로 사용되는 파일 형식을 정의한다. .pfx는 pkcs #12 파일형식 확장자이다. 이 파일 형식은 여러 개의 개체(예: 다중 인증서, 다중 키)를 포함할 수 있으며 보통, 비밀번호로 보호되거나 암호화된,. java keystore의 형식으로 사용된다. 인증서 인증서 안에는 public information, public key가 들어있다. CA로부터 받은 public key가 있다. 인증서 관련 용어 정리 전자서명인증관리체계 DN 규격 참고 CN (Common Name): 가입자의 이름을 나타내는 속성 OU (Organizational Unit Name): 가입자가 속한 하위 조직명을 나타내기 위한 속성, 공인인증기관일 경우 CA를 사용 O (Organization Name): 가입자가 속한 조직명을 나타내기 위한 속성 DC (Domain Component): 가입자의 도메인 주소를 나타내기 위한 속성 인증서 확장자 .pem: X.509 v3 파일의 한 형태 X.509란 공개키 인증서를 사용하기 위해서는 어떤 표준이 있어야 되는 것인데 현재 널리 사용하고 있는 표준이 X.509이다. X.509의 표준을 사용하여 만든 인증서를 X.509 인증서라고 부른다. Extensino항목은 중요한 것만 기입했다. 위의 항목 중 DN형식이 있는데 DN의 항목은 다음과 같다.</summary></entry><entry><title type="html">Syslog-Ng 심화 사용</title><link href="http://localhost:4000/2019/05/13/syslog-ng_advanced.html" rel="alternate" type="text/html" title="Syslog-Ng 심화 사용" /><published>2019-05-13T00:00:00+09:00</published><updated>2019-05-13T00:00:00+09:00</updated><id>http://localhost:4000/2019/05/13/syslog-ng_advanced</id><content type="html" xml:base="http://localhost:4000/2019/05/13/syslog-ng_advanced.html">&lt;h3 id=&quot;if-elif-and-else-구문&quot;&gt;if, elif, and else 구문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2가지 형식이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;if 조건문 안에는 filter expression만 가능하고 foo가 포함되어 있지 않으면 else구문으로 빠진다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;(&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;)) {
 &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;(); };
} &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; {
 ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;if 구문 안에서 date-parser가 실패하거나 foo가 없으면 else로 빠진다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;(&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;)); };
 &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;(); };
} &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; {
 ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;inline-방식&quot;&gt;inline 방식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;다음 2개의 코드는 동일하게 작동한다.&lt;/p&gt;

    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_local&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;();
      &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;();
  };
  &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_local&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/messages&quot;&lt;/span&gt;);
  };
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s_local&lt;/span&gt;);
      &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d_local&lt;/span&gt;);
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;();
          &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;();
      };
      &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/messages&quot;&lt;/span&gt;);
      };
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;channel&quot;&gt;channel&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;object안에 다시 object를 넣을 수 있다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_apache&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/apache/error.log&quot;&lt;/span&gt;);
      };
      &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;p_apache_parser&lt;/span&gt;);
  };
};
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s_apache&lt;/span&gt;); ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전역변수-설정&quot;&gt;전역변수 설정&lt;/h3&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mypath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/opt/myapp/logs&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_myapp_1&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;`mypath`/access.log&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;));
};
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_myapp_2&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;`mypath`/error.log&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;));
};
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_myapp_3&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;`mypath`/debug.log&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="syslog-ng" /><summary type="html">if, elif, and else 구문 2가지 형식이 가능하다. if 조건문 안에는 filter expression만 가능하고 foo가 포함되어 있지 않으면 else구문으로 빠진다. if (message('foo')) { parser { date-parser(); }; } else { ... }; if 구문 안에서 date-parser가 실패하거나 foo가 없으면 else로 빠진다. if { filter { message('foo')); }; parser { date-parser(); }; } else { ... }; inline 방식 다음 2개의 코드는 동일하게 작동한다. source s_local { system(); internal(); }; destination d_local { file(&quot;/var/log/messages&quot;); }; log { source(s_local); destination(d_local); }; log { source { system(); internal(); }; destination { file(&quot;/var/log/messages&quot;); }; }; channel object안에 다시 object를 넣을 수 있다. source s_apache { channel { source { file(&quot;/var/log/apache/error.log&quot;); }; parser(p_apache_parser); }; }; log { source(s_apache); ... }; 전역변수 설정 @define mypath &quot;/opt/myapp/logs&quot; source s_myapp_1 { file(&quot;`mypath`/access.log&quot; follow-freq(1)); }; source s_myapp_2 { file(&quot;`mypath`/error.log&quot; follow-freq(1)); }; source s_myapp_3 { file(&quot;`mypath`/debug.log&quot; follow-freq(1)); };</summary></entry><entry><title type="html">Syslog-Ng 설치 및 사용 방법</title><link href="http://localhost:4000/2019/05/12/syslog-ng_install.html" rel="alternate" type="text/html" title="Syslog-Ng 설치 및 사용 방법" /><published>2019-05-12T00:00:00+09:00</published><updated>2019-05-12T00:00:00+09:00</updated><id>http://localhost:4000/2019/05/12/syslog-ng_install</id><content type="html" xml:base="http://localhost:4000/2019/05/12/syslog-ng_install.html">&lt;h2 id=&quot;syslog-ng란&quot;&gt;syslog-ng란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;로그를 다루는 프로그램이다.&lt;/li&gt;
  &lt;li&gt;기존의 리눅스에 포함되어 있는 syslog의 상위 버전이라 할 수 있다.&lt;/li&gt;
  &lt;li&gt;CentOS7의 경우는 syslog보다 조금 더 상위버전인 rsyslog가 있지만 그것보다 더 상위버전인 것이 syslog-ng이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rhel-or-centos7-위에-설치&quot;&gt;RHEL or CentOS7 위에 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;RHEL은 아래 과정을 하고 CentOS은 안 해도 된다. syslog-ng를 실행하기 위한 packages를 받을 수 있게 설정하는 작업.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; subscription-manager repos &lt;span class=&quot;nt&quot;&gt;--enable&lt;/span&gt; rhel-7-server-optional-rpms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;RPM package에다가 RHEL에 포함되어 있지 않은 Extra Packages for Enterprise Linux(EPEL)을 설치하는 작업
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rpm &lt;span class=&quot;nt&quot;&gt;-Uvh&lt;/span&gt; epel-release-latest-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;본격적인 syslog-ng 설치 작업.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/yum.repos.d/
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; wget https://copr.fedorainfracloud.org/coprs/czanik/syslog-ng319/repo/epel-7/czanik-syslog-ng319-epel-7.repo
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install syslog-ng
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;syslog-ng
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl start syslog-ng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위 설치가 끝나면 기존에 존재하는 rsyslog or syslog를 삭제시켜 충돌을 방지시킨다.&lt;br /&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum erase rsyslog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;다른 리눅스 버전의 경우 아래 링크 참조&lt;br /&gt;
&lt;a href=&quot;https://www.syslog-ng.com/products/open-source-log-management/3rd-party-binaries.aspx&quot;&gt;syslog-ng 공식 installation 사이트&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;syslog-ng를-데몬으로-돌리기&quot;&gt;Syslog-ng를 데몬으로 돌리기&lt;/h2&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;syslog-ng
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl start syslog-ng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위의 과정에서 start(restart)에 에러가 나는 경우가 있을 수 있다. port에 관한 설정을 했을때 port 상태를 확인해야한다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; semanage port &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;syslog
&lt;span class=&quot;go&quot;&gt;syslog_tls_port_t              tcp      6514, 10514
syslog_tls_port_t              udp      6514, 10514
syslogd_port_t                 tcp      601, 20514
syslogd_port_t                 udp      514, 601, 20514
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;여기에서 자신이 받고자 하는 port 정보가 없으면 아래의 명령어로 port를 추가시킨후 재실행 한다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; semanage port &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; syslogd_port_t &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp 7071
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl reset-failed syslog-ng
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl restart syslog-ng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;syslog-ng는 syslog를 이용하기 때문에 기존 syslog의 port값 정보를 이용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;semanage는 SELinux에 사용되는 명령어이다.
SELinux는 RHEL 기반의 배포판 커널에 이식된 커널 레벨의 보안 모듈이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;기본-개념&quot;&gt;기본 개념&lt;/h2&gt;
&lt;p&gt;syslog-ng는 syslog-ng.conf 파일을 프로그래밍하면서 조작하는 프로그램이다.&lt;br /&gt;
크게 3가지 부분으로 나뉜다.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;source &amp;lt;identifier&amp;gt; { params }&lt;/dt&gt;
  &lt;dd&gt;어디에서 로그를 수집할 것인지&lt;/dd&gt;
  &lt;dt&gt;filter &amp;lt;identifier&amp;gt; { params }&lt;/dt&gt;
  &lt;dd&gt;어떤 로그만 수집할 것인지&lt;/dd&gt;
  &lt;dt&gt;destination &amp;lt;identifier&amp;gt; { params }&lt;/dt&gt;
  &lt;dd&gt;수집된 로그를 어디로 보낼 것인지&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;identifier는 모든 단어가 허용된다. (예약어와 충돌이 없다.)&lt;br /&gt;
위의 3가지 요소를 배치하여 최종 실행 코드를 작성한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;log{ source(s1); source(s2); … filter(f1); filter(f2); … destination(d1); destination(d2); … };&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;19&lt;/span&gt;
@&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scl.conf&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; {
     &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;300000&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;time_reopen&lt;/span&gt; (&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;log_fifo_size&lt;/span&gt; (&lt;span class=&quot;m&quot;&gt;100000&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;chain_hostnames&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;use_dns&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;dns_cache&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;use_fqdn&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;create_dirs&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;keep_hostname&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;);
     &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;);
};

&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template_date_format&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC} ${HOST} ${MSGHDR}${MSG}\n&quot;&lt;/span&gt;);
    &lt;span class=&quot;n&quot;&gt;template_escape&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;);
};

&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_sys&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;();
    &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;();
    &lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;514&lt;/span&gt;));
};
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.92&quot;&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;7071&lt;/span&gt;));
};

&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_mlal&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;usertty&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hyoeun_info&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/hyoeun_log/${YEAR}_${MONTH}_${DAY}_info&quot;&lt;/span&gt;); };

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_kernel&lt;/span&gt;     { &lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;kern&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_default&lt;/span&gt;    { &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;..&lt;span class=&quot;n&quot;&gt;emerg&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;)
                        &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;authpriv&lt;/span&gt;)
                        &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt;)); };
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_emergency&lt;/span&gt;  { &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;emerg&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_news&lt;/span&gt;       { &lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;uucp&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;
                        (&lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;)
                        &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;crit&lt;/span&gt;..&lt;span class=&quot;n&quot;&gt;emerg&lt;/span&gt;)); };

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s_sys&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d_mlal&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;f_default&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;f_news&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;hyoeun_info&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt;);
    &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;f_default&lt;/span&gt;);
    &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;^((?!Hello).)*$&quot;&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;MSG&quot;&lt;/span&gt;));
        &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;Program\.exe&quot;&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;MSG&quot;&lt;/span&gt;));
        &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;Ann&quot;&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;MSGHDR&quot;&lt;/span&gt;));
    };
    &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/hyoeun/Program_${YEAR}_${MONTH}_${DAY}_${HOUR}_$(/ ${MIN} 10)0.log&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;template_date_format&lt;/span&gt;));
    };
};

@&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/syslog-ng/conf.d/*.conf&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;실행-확인&quot;&gt;실행 확인&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ netstat -nltup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 명령어를 치면 현재 작동하고 있는 syslog-ng의 상황을 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;더-자세히-알아보기&quot;&gt;더 자세히 알아보기&lt;/h2&gt;

&lt;h3 id=&quot;source&quot;&gt;&lt;a href=&quot;https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/16#TOPIC-956446&quot;&gt;Source&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;pipe: 지정된 파이프 이름을 오픈하여 로그 메시지를 읽음&lt;/li&gt;
  &lt;li&gt;internal: syslog-ng 내부에서 생성되는 메시지를 수집&lt;/li&gt;
  &lt;li&gt;system:&lt;/li&gt;
  &lt;li&gt;unix-stream: SOCK_STREAM 모드로 지정된 UNIX 소켓을 열고 로그 메시지를 수신(Linux의 경우)
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; (&lt;span class=&quot;s2&quot;&gt;&quot;/proc/kmsg&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_prefix&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;kernel:&quot;&lt;/span&gt;));
  &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; (&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;path-to-socket&amp;gt;&quot;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;));
  &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;();
  &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;();
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;unix-dgram: SOCK_DGRAM 모드로 지정된 UNIX 소켓을 열고 로그 메시지를 수신(BSD 계열 UNIX)&lt;/li&gt;
  &lt;li&gt;file: 지정된 파일을 열고 메시지를 읽음
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_file&lt;/span&gt; { 
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/messages_${HOST}&quot;&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;#HOST라는 매크로를 사용 하고 싶을 때.
&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;udp: UDP 포트로 대기 로그 메시지를 수신
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_file&lt;/span&gt; { 
  &lt;span class=&quot;n&quot;&gt;udp&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.92&quot;&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;514&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;tcp: TCP 포트로 대기 로그 메시지를 수신
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpgateway&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/dev/log&quot;&lt;/span&gt;);
  &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;();
  &lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;514&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;max_connections&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;network: udp,tcp는 obsolete이기 때문에 안 쓰고 network로 대체하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;TLS를 쓰는 경우에는 transport에 “tls”, TCP는 “tcp”, UDP는 “udp”로 대체해서 쓴다.&lt;/li&gt;
      &lt;li&gt;IPv6의 경우에는 ip-protocol(6)를 추가한다.
        &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_new_network_tcp&lt;/span&gt; {
&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;(
    &lt;span class=&quot;n&quot;&gt;transport&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;tls&quot;&lt;/span&gt;)
    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;1999&lt;/span&gt;)
    &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;peer&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;required-trusted&quot;&lt;/span&gt;)
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/opt/syslog-ng/etc/syslog-ng/syslog-ng.key&quot;&lt;/span&gt;)
        &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s1&quot;&gt;'/opt/syslog-ng/etc/syslog-ng/syslog-ng.crt'&lt;/span&gt;)
    )
);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;sun-stream: 지정된 STREAM 장치를 열고 수신(Solaris)&lt;/li&gt;
  &lt;li&gt;wildcard-file(): 여러파일에서 메시지를 수집
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_file&lt;/span&gt; { 
  &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(
      &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;pathname&amp;gt;&quot;&lt;/span&gt;)
     &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;filename&amp;gt;&quot;&lt;/span&gt;)
  ); 
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;syslog: syslog로부터 로그를 수집
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_network&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;syslog&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;transport&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;udp&quot;&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filter&quot;&gt;&lt;a href=&quot;https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/51#TOPIC-956579&quot;&gt;Filter&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;log 문에 여러 개의 filter 문이 포함되어있는 경우 syslog-ng는 모든 필터가 true 인 경우에만 로그를 저장합니다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo_filter1&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;example1&quot;&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo_filter2&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;example2&quot;&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;);
  &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;demo_filter1&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;demo_filter2&lt;/span&gt;);
  &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;); };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;host는 동시에 2개 일 수 없기에 위와 같은 코드는 로그 수집이 불가하고 따라서 아래와 같이 수정해야합니다.&lt;/p&gt;
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo_filter&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;example1&quot;&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;example2&quot;&lt;/span&gt;); };
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;);
  &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;demo_filter&lt;/span&gt;);
  &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;); &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;); };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;match: 정규식에 해당하는 메시지를 선택해서 필터링.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_filter&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;regex expre&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;MSGHDR&quot;&lt;/span&gt;)); &lt;span class=&quot;c&quot;&gt;#value는 ${MESSAGE} MACRO로 받아지는 부분으로 scope를 좁혀주는 역할을 한다.
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;regex expre&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;MSG&quot;&lt;/span&gt;)); &lt;span class=&quot;c&quot;&gt;#value 옵션 안에 $ sign을 포함하지 말고 MACRO를 그냥 넣는다.
&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;message: match에서 메시지 부분만(헤더부분 제외) 필터링.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_filter&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;regexp&quot;&lt;/span&gt;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;level: emerge, alert, crit, err, warning, notice, info, debug 구분으로 필터링.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level_filter&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;);
 &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;..&lt;span class=&quot;n&quot;&gt;emerg&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;#..으로 범위 지정이 가능합니다.
&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;netmask: 특정 IP에서 온 host message만 필터링.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_filter&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;netmask&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;192&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;168&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;151&lt;/span&gt;/&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;#255.255.255.0 대신에 24로 입력할 수도 있다. IPv6인 경우 netmask6()를 사용하면 된다.
&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;facility: name, code와도 되는건데 아래의 코드를 사용한다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Numberical Code&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Facility Name&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Facility&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;kern&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;kernel messages&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;user&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;user-level messages&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;mail&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;mail system&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;daemon&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;system daemons&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;auth&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;security/authorization messages&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;syslog&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;messages generated internally by syslogd&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;lpr&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;line printer subsystem&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;news&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;network news subsystem&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;uucp&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;UUCP subsystem&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;cron&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;clock daemon&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;authpriv&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;security/authorization messages&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;ftp&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;FTP daemon&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;ntp&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;NTP subsystem&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;security&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;log audit&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;console&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;log alert&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;solaris-cron&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;clock daemon&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;16-23&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;local0..local7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;locally used facilities (local0-local7)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_local1&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;facility&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;local1&lt;/span&gt;); 
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;destination&quot;&gt;&lt;a href=&quot;https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/27#TOPIC-956486&quot;&gt;Destination&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;file: macros를 이용해 파일 이름을 만들어 저장 할 수 있다. create-dirs() setting을 통해 폴더가 존재하지 않아도 만들 수 있다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d_file&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/${YEAR}.${MONTH}.${DAY}/messages&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;${HOUR}:${MIN}:${SEC} ${TZ} ${HOST} [${LEVEL}] ${MESSAGE}\n&quot;&lt;/span&gt;)
      &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;)
      &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;)
      &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;)
      &lt;span class=&quot;n&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;0777&lt;/span&gt;)
      );
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;options&quot;&gt;&lt;a href=&quot;https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/54#TOPIC-956589&quot;&gt;Options&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;option 이름들, parameter들은 -이나 _를 동일하게 인식한다. ex) max-connections(10) == max_connections(10)&lt;/li&gt;
  &lt;li&gt;create-dirs (no): yes, no(default)만 올 수 있고 destination files들을 위해 driectory를 만들수 있게 할 것인지 아닌지를 설정.&lt;/li&gt;
  &lt;li&gt;dns-cache-expire(3600): 캐쉬를 언제까지 볼 수 있게 할 것인지 보는 시간 설정(초단위).&lt;/li&gt;
  &lt;li&gt;dns-cache (yes): yes(default), no. Dns cache usage를 enable할건지 disable할건지 설정.&lt;/li&gt;
  &lt;li&gt;flush-lines(100): destination에 얼마나 많은 lines을 flushed할 것인지 설정.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elasticsearch&quot;&gt;elasticsearch&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Linux에만 사용이 되고 많은 memory를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;macro&quot;&gt;Macro&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HOUR12: 01, 02&lt;/li&gt;
  &lt;li&gt;AMPM: AM, PM&lt;/li&gt;
  &lt;li&gt;DATE: Apr 22 09:44:29&lt;/li&gt;
  &lt;li&gt;ISODATE: 2006-06-13T15:58:00.123+01:00&lt;/li&gt;
  &lt;li&gt;YEAR: 2019&lt;/li&gt;
  &lt;li&gt;MONTH: 04&lt;/li&gt;
  &lt;li&gt;WEEK_DAY: 3 (화요일 의미 1-7까지 있다.)&lt;/li&gt;
  &lt;li&gt;WEEKDAY: Thu&lt;/li&gt;
  &lt;li&gt;DAY: 23&lt;/li&gt;
  &lt;li&gt;MIN: 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;나누기&quot;&gt;나누기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;$(/ X Y)는 X를 Y로 나눈 값을 나타낸다.&lt;/li&gt;
  &lt;li&gt;$(if (“${MIN}” &amp;lt; 5) “0” “$(if (“${MIN}” &amp;lt; 10) “1” “…”)”) 이런 식으로 5분 단위의 rotation을 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기타-정보&quot;&gt;기타 정보&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;option 혹은 parameter들 사이에서 ,는 무시될 수 있다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_demo_stream&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;path-to-socket&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;));
};
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_demo_stream&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;path-to-socket&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;identifier에 ““로 선언하면 안에 스페이스도 허용 가능하다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s demo stream&quot;&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;(&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;path-to-socket&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;(&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="syslog-ng" /><summary type="html">syslog-ng란? 로그를 다루는 프로그램이다. 기존의 리눅스에 포함되어 있는 syslog의 상위 버전이라 할 수 있다. CentOS7의 경우는 syslog보다 조금 더 상위버전인 rsyslog가 있지만 그것보다 더 상위버전인 것이 syslog-ng이다. RHEL or CentOS7 위에 설치 RHEL은 아래 과정을 하고 CentOS은 안 해도 된다. syslog-ng를 실행하기 위한 packages를 받을 수 있게 설정하는 작업. $ subscription-manager repos --enable rhel-7-server-optional-rpms RPM package에다가 RHEL에 포함되어 있지 않은 Extra Packages for Enterprise Linux(EPEL)을 설치하는 작업 $ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm $ rpm -Uvh epel-release-latest-7.noarch.rpm 본격적인 syslog-ng 설치 작업. $ cd /etc/yum.repos.d/ $ wget https://copr.fedorainfracloud.org/coprs/czanik/syslog-ng319/repo/epel-7/czanik-syslog-ng319-epel-7.repo $ yum install syslog-ng $ systemctl enable syslog-ng $ systemctl start syslog-ng 위 설치가 끝나면 기존에 존재하는 rsyslog or syslog를 삭제시켜 충돌을 방지시킨다. $ yum erase rsyslog 다른 리눅스 버전의 경우 아래 링크 참조 syslog-ng 공식 installation 사이트 Syslog-ng를 데몬으로 돌리기 $ systemctl enable syslog-ng $ systemctl start syslog-ng 위의 과정에서 start(restart)에 에러가 나는 경우가 있을 수 있다. port에 관한 설정을 했을때 port 상태를 확인해야한다. $ semanage port -l | grep syslog syslog_tls_port_t tcp 6514, 10514 syslog_tls_port_t udp 6514, 10514 syslogd_port_t tcp 601, 20514 syslogd_port_t udp 514, 601, 20514 여기에서 자신이 받고자 하는 port 정보가 없으면 아래의 명령어로 port를 추가시킨후 재실행 한다. $ semanage port -a -t syslogd_port_t -p udp 7071 $ systemctl reset-failed syslog-ng $ systemctl restart syslog-ng syslog-ng는 syslog를 이용하기 때문에 기존 syslog의 port값 정보를 이용한다. semanage는 SELinux에 사용되는 명령어이다. SELinux는 RHEL 기반의 배포판 커널에 이식된 커널 레벨의 보안 모듈이다. 기본 개념 syslog-ng는 syslog-ng.conf 파일을 프로그래밍하면서 조작하는 프로그램이다. 크게 3가지 부분으로 나뉜다. source &amp;lt;identifier&amp;gt; { params } 어디에서 로그를 수집할 것인지 filter &amp;lt;identifier&amp;gt; { params } 어떤 로그만 수집할 것인지 destination &amp;lt;identifier&amp;gt; { params } 수집된 로그를 어디로 보낼 것인지 identifier는 모든 단어가 허용된다. (예약어와 충돌이 없다.) 위의 3가지 요소를 배치하여 최종 실행 코드를 작성한다. log{ source(s1); source(s2); … filter(f1); filter(f2); … destination(d1); destination(d2); … }; 예시 @version:3.19 @include &quot;scl.conf&quot; options { flush-timeout(300000); time_reopen (100); log_fifo_size (100000); chain_hostnames (off); use_dns (no); dns_cache (no); use_fqdn (no); create_dirs (no); keep_hostname (yes); flush-lines(5); }; template template_date_format { template(&quot;${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC} ${HOST} ${MSGHDR}${MSG}\n&quot;); template_escape(no); }; source s_sys { system(); internal(); udp(ip(0.0.0.0) port(514)); }; source udp { udp(ip(&quot;192.168.0.92&quot;) port(7071)); }; destination d_mlal { usertty(&quot;*&quot;); }; destination hyoeun_info { file(&quot;/var/log/hyoeun_log/${YEAR}_${MONTH}_${DAY}_info&quot;); }; filter f_kernel { facility(kern); }; filter f_default { level(info..emerg) and not (facility(mail) or facility(authpriv) or facility(cron)); }; filter f_emergency { level(emerg); }; filter f_news { facility(uucp) or (facility(news) and level(crit..emerg)); }; log { source(s_sys); destination(d_mlal); }; log { source(udp); filter(f_default); filter(f_news); destination(hyoeun_info); }; log { source(udp); filter(f_default); filter { match(&quot;^((?!Hello).)*$&quot;,value(&quot;MSG&quot;)); match(&quot;Program\.exe&quot;,value(&quot;MSG&quot;)); match(&quot;Ann&quot;,value(&quot;MSGHDR&quot;)); }; destination { file(&quot;/var/log/hyoeun/Program_${YEAR}_${MONTH}_${DAY}_${HOUR}_$(/ ${MIN} 10)0.log&quot; template(template_date_format)); }; }; @include &quot;/etc/syslog-ng/conf.d/*.conf&quot; 실행 확인 $ netstat -nltup 위의 명령어를 치면 현재 작동하고 있는 syslog-ng의 상황을 볼 수 있다. 더 자세히 알아보기 Source pipe: 지정된 파이프 이름을 오픈하여 로그 메시지를 읽음 internal: syslog-ng 내부에서 생성되는 메시지를 수집 system: unix-stream: SOCK_STREAM 모드로 지정된 UNIX 소켓을 열고 로그 메시지를 수신(Linux의 경우) source src { pipe (&quot;/proc/kmsg&quot; log_prefix(&quot;kernel:&quot;)); unix-stream (&quot;&amp;lt;path-to-socket&amp;gt;&quot; max-connections(10) group(log)); system(); internal(); }; unix-dgram: SOCK_DGRAM 모드로 지정된 UNIX 소켓을 열고 로그 메시지를 수신(BSD 계열 UNIX) file: 지정된 파일을 열고 메시지를 읽음 source s_file { file(&quot;/var/log/messages_${HOST}&quot;); #HOST라는 매크로를 사용 하고 싶을 때. }; udp: UDP 포트로 대기 로그 메시지를 수신 source s_file { udp(ip(&quot;192.168.0.92&quot;) port(514)); }; tcp: TCP 포트로 대기 로그 메시지를 수신 source tcpgateway { unix-stream(&quot;/dev/log&quot;); internal(); tcp(ip(0.0.0.0) port(514) max_connections(1000)); }; network: udp,tcp는 obsolete이기 때문에 안 쓰고 network로 대체하는 것이 좋다. TLS를 쓰는 경우에는 transport에 “tls”, TCP는 “tcp”, UDP는 “udp”로 대체해서 쓴다. IPv6의 경우에는 ip-protocol(6)를 추가한다. source s_new_network_tcp { network( transport(&quot;tls&quot;) ip(127.0.0.1) port(1999) tls( peer-verify(&quot;required-trusted&quot;) key-file(&quot;/opt/syslog-ng/etc/syslog-ng/syslog-ng.key&quot;) cert-file('/opt/syslog-ng/etc/syslog-ng/syslog-ng.crt') ) ); }; sun-stream: 지정된 STREAM 장치를 열고 수신(Solaris) wildcard-file(): 여러파일에서 메시지를 수집 source s_file { wildcard-file( base-dir(&quot;&amp;lt;pathname&amp;gt;&quot;) filename-pattern(&quot;&amp;lt;filename&amp;gt;&quot;) ); }; syslog: syslog로부터 로그를 수집 source s_network { syslog(ip(10.1.2.3) transport(&quot;udp&quot;)); }; Filter log 문에 여러 개의 filter 문이 포함되어있는 경우 syslog-ng는 모든 필터가 true 인 경우에만 로그를 저장합니다. filter demo_filter1 { host(&quot;example1&quot;); }; filter demo_filter2 { host(&quot;example2&quot;); }; log { source(s1); source(s2); filter(demo_filter1); filter(demo_filter2); destination(d1); destination(d2); }; host는 동시에 2개 일 수 없기에 위와 같은 코드는 로그 수집이 불가하고 따라서 아래와 같이 수정해야합니다. filter demo_filter { host(&quot;example1&quot;) or host(&quot;example2&quot;); }; log { source(s1); source(s2); filter(demo_filter); destination(d1); destination(d2); }; match: 정규식에 해당하는 메시지를 선택해서 필터링. filter match_filter { match(&quot;regex expre&quot;, value(&quot;MSGHDR&quot;)); #value는 ${MESSAGE} MACRO로 받아지는 부분으로 scope를 좁혀주는 역할을 한다. match(&quot;regex expre&quot;, value(&quot;MSG&quot;)); #value 옵션 안에 $ sign을 포함하지 말고 MACRO를 그냥 넣는다. }; message: match에서 메시지 부분만(헤더부분 제외) 필터링. filter message_filter { message(&quot;regexp&quot;); }; level: emerge, alert, crit, err, warning, notice, info, debug 구분으로 필터링. filter level_filter { level(warning); level(err..emerg); #..으로 범위 지정이 가능합니다. }; netmask: 특정 IP에서 온 host message만 필터링. filter ip_filter { netmask(192.168.0.151/255.255.255.0); #255.255.255.0 대신에 24로 입력할 수도 있다. IPv6인 경우 netmask6()를 사용하면 된다. }; facility: name, code와도 되는건데 아래의 코드를 사용한다. Numberical Code Facility Name Facility 0 kern kernel messages 1 user user-level messages 2 mail mail system 3 daemon system daemons 4 auth security/authorization messages 5 syslog messages generated internally by syslogd 6 lpr line printer subsystem 7 news network news subsystem 8 uucp UUCP subsystem 9 cron clock daemon 10 authpriv security/authorization messages 11 ftp FTP daemon 12 ntp NTP subsystem 13 security log audit 14 console log alert 15 solaris-cron clock daemon 16-23 local0..local7 locally used facilities (local0-local7) filter f_local1 { facility(local1); }; Destination file: macros를 이용해 파일 이름을 만들어 저장 할 수 있다. create-dirs() setting을 통해 폴더가 존재하지 않아도 만들 수 있다. destination d_file { file(&quot;/var/log/${YEAR}.${MONTH}.${DAY}/messages&quot; template(&quot;${HOUR}:${MIN}:${SEC} ${TZ} ${HOST} [${LEVEL}] ${MESSAGE}\n&quot;) template-escape(no) owner(&quot;root&quot;) group(&quot;root&quot;) perm(0777) ); }; Options option 이름들, parameter들은 -이나 _를 동일하게 인식한다. ex) max-connections(10) == max_connections(10) create-dirs (no): yes, no(default)만 올 수 있고 destination files들을 위해 driectory를 만들수 있게 할 것인지 아닌지를 설정. dns-cache-expire(3600): 캐쉬를 언제까지 볼 수 있게 할 것인지 보는 시간 설정(초단위). dns-cache (yes): yes(default), no. Dns cache usage를 enable할건지 disable할건지 설정. flush-lines(100): destination에 얼마나 많은 lines을 flushed할 것인지 설정. elasticsearch Linux에만 사용이 되고 많은 memory를 사용한다. Macro HOUR12: 01, 02 AMPM: AM, PM DATE: Apr 22 09:44:29 ISODATE: 2006-06-13T15:58:00.123+01:00 YEAR: 2019 MONTH: 04 WEEK_DAY: 3 (화요일 의미 1-7까지 있다.) WEEKDAY: Thu DAY: 23 MIN: 1 나누기 $(/ X Y)는 X를 Y로 나눈 값을 나타낸다. $(if (“${MIN}” &amp;lt; 5) “0” “$(if (“${MIN}” &amp;lt; 10) “1” “…”)”) 이런 식으로 5분 단위의 rotation을 만들 수 있다. 기타 정보 option 혹은 parameter들 사이에서 ,는 무시될 수 있다. source s_demo_stream { unix-stream(&quot;&amp;lt;path-to-socket&amp;gt;&quot; max-connections(10) group(log)); }; source s_demo_stream { unix-stream(&quot;&amp;lt;path-to-socket&amp;gt;&quot;, max-connections(10), group(log)); }; identifier에 ““로 선언하면 안에 스페이스도 허용 가능하다. source &quot;s demo stream&quot; { unix-stream(&quot;&amp;lt;path-to-socket&amp;gt;&quot; max-connections(10) group(log)); };</summary></entry><entry><title type="html">c# 리눅스 배포 및 데몬 등록법</title><link href="http://localhost:4000/2019/03/04/cs_release.html" rel="alternate" type="text/html" title="c# 리눅스 배포 및 데몬 등록법" /><published>2019-03-04T00:00:00+09:00</published><updated>2019-03-04T00:00:00+09:00</updated><id>http://localhost:4000/2019/03/04/cs_release</id><content type="html" xml:base="http://localhost:4000/2019/03/04/cs_release.html">&lt;h2 id=&quot;centos7-배포-방법&quot;&gt;CentOS7 배포 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Visual Studio를 통해서 디버그 모드로 아무 이상이 없는지 먼저 확인부터 하고 배포를 시작합니다.&lt;/li&gt;
  &lt;li&gt;아무 이상이 없을경우 window power shell을 접속하여 본인이 배포하시기 원하는 폴더로 접근합니다.&lt;/li&gt;
  &lt;li&gt;폴더에 접근 후 dotnet publish 라는 명령어를 실행시킵니다. 그러면 publish된 경로가 나옵니다.&lt;/li&gt;
  &lt;li&gt;이후 배포 버전이 나온 경로에 들어가서 Winscp로 리눅스에서 실행시킬 파일들을 옮깁니다.&lt;/li&gt;
  &lt;li&gt;옮긴 이후 다음 리눅스에서 dotnet &lt;프로그램이름.dll&gt;로 정상 작동하는지 확인합니다.&lt;/프로그램이름.dll&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;데몬-등록법&quot;&gt;데몬 등록법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;다음 코드를 작성하여 저장합니다. 저는 dnsvc.service 라는 파일 이름으로 작성하였습니다.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Description=Logcenter SyslogPrep Service&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Type=simple&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ExecStart=/usr/bin/dotnet /root/play/NxP.Agent.SyslogPrep.dll&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Restart=always&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WantedBy=multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이후 다음 명령어들을 실행시킵니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; cp dnsvc.service /lib/systemd/system
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl daemon-reload
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;dnsvc
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl start dnsvc
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; systemctl status dnsvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;마지막 명령어로 잘 실행되었는지 확인 하시고 정상작동이 되면 데몬으로 잘 돌아가는 것입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;참고 사이트
https://pmcgrath.net/running-a-simple-dotnet-core-linux-daemon&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="centos7" /><category term="c#" /><category term=".net" /><category term="core" /><summary type="html">CentOS7 배포 방법 Visual Studio를 통해서 디버그 모드로 아무 이상이 없는지 먼저 확인부터 하고 배포를 시작합니다. 아무 이상이 없을경우 window power shell을 접속하여 본인이 배포하시기 원하는 폴더로 접근합니다. 폴더에 접근 후 dotnet publish 라는 명령어를 실행시킵니다. 그러면 publish된 경로가 나옵니다. 이후 배포 버전이 나온 경로에 들어가서 Winscp로 리눅스에서 실행시킬 파일들을 옮깁니다. 옮긴 이후 다음 리눅스에서 dotnet 로 정상 작동하는지 확인합니다. 데몬 등록법 다음 코드를 작성하여 저장합니다. 저는 dnsvc.service 라는 파일 이름으로 작성하였습니다. [Unit] Description=Logcenter SyslogPrep Service [Service] Type=simple ExecStart=/usr/bin/dotnet /root/play/NxP.Agent.SyslogPrep.dll Restart=always [Install] WantedBy=multi-user.target 이후 다음 명령어들을 실행시킵니다. $ cp dnsvc.service /lib/systemd/system $ systemctl daemon-reload $ systemctl enable dnsvc $ systemctl start dnsvc $ systemctl status dnsvc 마지막 명령어로 잘 실행되었는지 확인 하시고 정상작동이 되면 데몬으로 잘 돌아가는 것입니다. 참고 사이트 https://pmcgrath.net/running-a-simple-dotnet-core-linux-daemon</summary></entry><entry><title type="html">NLog.Targets.Syslog 사용법</title><link href="http://localhost:4000/2019/03/03/nlog.html" rel="alternate" type="text/html" title="NLog.Targets.Syslog 사용법" /><published>2019-03-03T00:00:00+09:00</published><updated>2019-03-03T00:00:00+09:00</updated><id>http://localhost:4000/2019/03/03/nlog</id><content type="html" xml:base="http://localhost:4000/2019/03/03/nlog.html">&lt;h2 id=&quot;c-net-core에서-nlog를-이용한-xml-사용법&quot;&gt;C# .net core에서 NLOG를 이용한 XML 사용법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;우선 NuGet을 통해 NLog와 NLog.Targets.Syslog를 설치합니다.&lt;/li&gt;
  &lt;li&gt;syslog는 Rfc5424와 같은 규격을 사용하기 때문에 아무렇게나 log를 만들 수 없습니다. 따라서 특정 규격에 맞게 데이터를 전송해야하는데 NLog가 그것을 담당해줍니다.&lt;/li&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;nlog&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;xmlns:sl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.nlog-project.org/schemas/NLog.Targets.Syslog.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;targets&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Updater&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/logs/updater${cached:cached=true:inner=${date:format=yyyy-MM-dd}}.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveFileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/logs/Updater{#}.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveAboveSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;concurrentWrites=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keepFileOpen=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveEvery=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveNumbering=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Rolling&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveDateFormat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxArchiveFiles=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SysLog&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/../Log/Sys/Sys.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveFileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/../Log/Sys/Sys_{#}.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveNumbering=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveDateFormat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveEvery=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ArchiveOldFileOnStartup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxArchiveFiles=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;90&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;concurrentWrites=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keepFileOpen=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;openFileCacheTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Udp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Chainsaw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;udp://127.0.0.1:7071&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApiLog&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/../Log/WebApi/API/APILog.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveFileName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${basedir}/../Log/WebApi/API/APILog_{#}.log&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveNumbering=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveDateFormat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archiveEvery=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ArchiveOldFileOnStartup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxArchiveFiles=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;90&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;concurrentWrites=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keepFileOpen=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;openFileCacheTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SyslogNG&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Syslog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:layout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SimpleLayout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${level:uppercase=true}|${message}|${logger}|${exception}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:messageCreation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:facility&amp;gt;&lt;/span&gt;Local1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:facility&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:rfc&amp;gt;&lt;/span&gt;Rfc5424&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:rfc&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:rfc5424&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:hostname&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SimpleLayout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${machinename}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:appName&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SimpleLayout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${appdomain:format={1\}}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:disableBom&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:disableBom&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:rfc5424&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:messageCreation&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:messageSend&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:protocol&amp;gt;&lt;/span&gt;Udp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:protocol&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:udp&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:server&amp;gt;&lt;/span&gt;192.168.0.92&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:server&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl:port&amp;gt;&lt;/span&gt;7071&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:port&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:udp&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl:messageSend&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/targets&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rules&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlevel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trace&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;writeTo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SysLog,Udp,SyslogNG&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something.Model.Context&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;writeTo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApiLog&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minlevel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trace&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;writeTo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SvcLog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;filters&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;when&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;equals('${logger}','Something.Model.Context')&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ignore&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filters&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nlog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Syslog가 정상적으로 읽혀지지 않을때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;new NLog.Targets.Syslog.SyslogTarget();&lt;/code&gt;를 통해 초기화를 해주면 위의 내용을 정상적으로 읽어들일 수 있습니다.&lt;/li&gt;
  &lt;li&gt;다음 코드로 Logger를 작성 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Runtime.CompilerServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;NLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HLogger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCurrentClassLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SyslogTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CodeBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetDic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;system.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ApiLog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SyslogNG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Udp&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetDic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;core.dll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Updater&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SysLog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SvcLog&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EnumerateFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                                                  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllTargets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RemoveTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;LogManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RemoveTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Write Debug Log : Parameter Validation&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetFileNameWithoutExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;() - &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Write Info Log : Start Point - End Point&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetFileNameWithoutExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;() - &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Write Error Log : Exception&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetFileNameWithoutExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;() - &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Write Warning Log : Performance Count&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetFileNameWithoutExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;() - &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="nlog" /><category term="c#" /><summary type="html">C# .net core에서 NLOG를 이용한 XML 사용법 우선 NuGet을 통해 NLog와 NLog.Targets.Syslog를 설치합니다. syslog는 Rfc5424와 같은 규격을 사용하기 때문에 아무렇게나 log를 만들 수 없습니다. 따라서 특정 규격에 맞게 데이터를 전송해야하는데 NLog가 그것을 담당해줍니다. 예시 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt; &amp;lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:sl=&quot;http://www.nlog-project.org/schemas/NLog.Targets.Syslog.xsd&quot;&amp;gt; &amp;lt;targets&amp;gt; &amp;lt;target name=&quot;Updater&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/logs/updater${cached:cached=true:inner=${date:format=yyyy-MM-dd}}.log&quot; archiveFileName=&quot;${basedir}/logs/Updater{#}.log&quot; archiveAboveSize=&quot;2048000&quot; concurrentWrites=&quot;true&quot; keepFileOpen=&quot;true&quot; archiveEvery=&quot;Day&quot; archiveNumbering=&quot;Rolling&quot; archiveDateFormat=&quot;yyyy-MM-dd&quot; maxArchiveFiles=&quot;30&quot; layout=&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot; /&amp;gt; &amp;lt;target name=&quot;SysLog&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/../Log/Sys/Sys.log&quot; archiveFileName=&quot;${basedir}/../Log/Sys/Sys_{#}.log&quot; archiveNumbering=&quot;Date&quot; archiveDateFormat=&quot;yyyy-MM-dd&quot; archiveEvery=&quot;Day&quot; ArchiveOldFileOnStartup=&quot;true&quot; maxArchiveFiles=&quot;90&quot; concurrentWrites=&quot;true&quot; keepFileOpen=&quot;true&quot; openFileCacheTimeout=&quot;30&quot; layout=&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot; /&amp;gt; &amp;lt;target name=&quot;Udp&quot; xsi:type=&quot;Chainsaw&quot; address=&quot;udp://127.0.0.1:7071&quot; /&amp;gt; &amp;lt;target name=&quot;ApiLog&quot; xsi:type=&quot;File&quot; fileName=&quot;${basedir}/../Log/WebApi/API/APILog.log&quot; archiveFileName=&quot;${basedir}/../Log/WebApi/API/APILog_{#}.log&quot; archiveNumbering=&quot;Date&quot; archiveDateFormat=&quot;yyyy-MM-dd&quot; archiveEvery=&quot;Day&quot; ArchiveOldFileOnStartup=&quot;true&quot; maxArchiveFiles=&quot;90&quot; concurrentWrites=&quot;true&quot; keepFileOpen=&quot;true&quot; openFileCacheTimeout=&quot;30&quot; layout=&quot;${longdate} ${uppercase:${level}} ${stacktrace} ${message}&quot; /&amp;gt; &amp;lt;target name=&quot;SyslogNG&quot; xsi:type=&quot;Syslog&quot;&amp;gt; &amp;lt;sl:layout xsi:type=&quot;SimpleLayout&quot; text=&quot;${level:uppercase=true}|${message}|${logger}|${exception}&quot; /&amp;gt; &amp;lt;sl:messageCreation&amp;gt; &amp;lt;sl:facility&amp;gt;Local1&amp;lt;/sl:facility&amp;gt; &amp;lt;sl:rfc&amp;gt;Rfc5424&amp;lt;/sl:rfc&amp;gt; &amp;lt;sl:rfc5424&amp;gt; &amp;lt;sl:hostname xsi:type=&quot;SimpleLayout&quot; text=&quot;${machinename}&quot; /&amp;gt; &amp;lt;sl:appName xsi:type=&quot;SimpleLayout&quot; text=&quot;${appdomain:format={1\}}&quot; /&amp;gt; &amp;lt;sl:disableBom&amp;gt;true&amp;lt;/sl:disableBom&amp;gt; &amp;lt;/sl:rfc5424&amp;gt; &amp;lt;/sl:messageCreation&amp;gt; &amp;lt;sl:messageSend&amp;gt; &amp;lt;sl:protocol&amp;gt;Udp&amp;lt;/sl:protocol&amp;gt; &amp;lt;sl:udp&amp;gt; &amp;lt;sl:server&amp;gt;192.168.0.92&amp;lt;/sl:server&amp;gt; &amp;lt;sl:port&amp;gt;7071&amp;lt;/sl:port&amp;gt; &amp;lt;/sl:udp&amp;gt; &amp;lt;/sl:messageSend&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/targets&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;logger name=&quot;*&quot; minlevel=&quot;Trace&quot; writeTo=&quot;SysLog,Udp,SyslogNG&quot; /&amp;gt; &amp;lt;logger name=&quot;Something.Model.Context&quot; level=&quot;Debug&quot; writeTo=&quot;ApiLog&quot; /&amp;gt; &amp;lt;logger name=&quot;*&quot; minlevel=&quot;Trace&quot; writeTo=&quot;SvcLog&quot;&amp;gt; &amp;lt;filters&amp;gt; &amp;lt;when condition=&quot;equals('${logger}','Something.Model.Context')&quot; action=&quot;Ignore&quot; /&amp;gt; &amp;lt;/filters&amp;gt; &amp;lt;/logger&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/nlog&amp;gt; Syslog가 정상적으로 읽혀지지 않을때에는 new NLog.Targets.Syslog.SyslogTarget();를 통해 초기화를 해주면 위의 내용을 정상적으로 읽어들일 수 있습니다. 다음 코드로 Logger를 작성 할 수 있습니다. using System.Collections.Generic; using System.IO; using System.Linq; using System.Runtime.CompilerServices; using NLog; public class HLogger { private static readonly NLog.Logger Logger = LogManager.GetCurrentClassLogger(); static HLogger() { new NLog.Targets.Syslog.SyslogTarget(); var path = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase); if (path == null) return; path = path.Replace(&quot;file:\\&quot;, string.Empty); var targetDic = new Dictionary&amp;lt;string, List&amp;lt;string&amp;gt;&amp;gt;(); targetDic.Add(&quot;system.exe&quot;, new List&amp;lt;string&amp;gt;() { &quot;ApiLog&quot;, &quot;SyslogNG&quot;, &quot;Udp&quot; }); targetDic.Add(&quot;core.dll&quot;, new List&amp;lt;string&amp;gt;() { &quot;Updater&quot;, &quot;SysLog&quot;, &quot;SvcLog&quot; }); var files = Directory.EnumerateFiles(path).Where(x =&amp;gt; targetDic.ContainsKey(new FileInfo(x).Name.ToLower())) .Select(x =&amp;gt; new FileInfo(x).Name.ToLower()); if (!files.Any()) { foreach (var target in LogManager.Configuration.AllTargets) { LogManager.Configuration.RemoveTarget(target.Name); } return; } foreach (var file in files) { foreach (var target in targetDic[file]) { LogManager.Configuration.RemoveTarget(target); } } } /// &amp;lt;summary&amp;gt; /// Write Debug Log : Parameter Validation /// &amp;lt;/summary&amp;gt; public static void Debug(string log, [CallerFilePath] string fileName = &quot;&quot;, [CallerMemberName] string memberName = &quot;&quot;) { Logger.Debug($&quot;{Path.GetFileNameWithoutExtension(fileName)}.{memberName}() - {log}&quot;); } /// &amp;lt;summary&amp;gt; /// Write Info Log : Start Point - End Point /// &amp;lt;/summary&amp;gt; public static void Info(string log, [CallerFilePath] string fileName = &quot;&quot;, [CallerMemberName] string memberName = &quot;&quot;) { Logger.Info($&quot;{Path.GetFileNameWithoutExtension(fileName)}.{memberName}() - {log}&quot;); } /// &amp;lt;summary&amp;gt; /// Write Error Log : Exception /// &amp;lt;/summary&amp;gt; public static void Error(string log, [CallerFilePath] string fileName = &quot;&quot;, [CallerMemberName] string memberName = &quot;&quot;) { Logger.Error($&quot;{Path.GetFileNameWithoutExtension(fileName)}.{memberName}() - {log}&quot;); } /// &amp;lt;summary&amp;gt; /// Write Warning Log : Performance Count /// &amp;lt;/summary&amp;gt; public static void Warn(string log, [CallerFilePath] string fileName = &quot;&quot;, [CallerMemberName] string memberName = &quot;&quot;) { Logger.Warn($&quot;{Path.GetFileNameWithoutExtension(fileName)}.{memberName}() - {log}&quot;); } }</summary></entry><entry><title type="html">Cassandra 설치 및 사용 방법</title><link href="http://localhost:4000/2019/02/02/cassandra_docker.html" rel="alternate" type="text/html" title="Cassandra 설치 및 사용 방법" /><published>2019-02-02T00:00:00+09:00</published><updated>2019-02-02T00:00:00+09:00</updated><id>http://localhost:4000/2019/02/02/cassandra_docker</id><content type="html" xml:base="http://localhost:4000/2019/02/02/cassandra_docker.html">&lt;h2 id=&quot;cassadnra에-대한-소개&quot;&gt;Cassadnra에 대한 소개&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;잘 정리된 &lt;a href=&quot;https://meetup.toast.com/posts/58&quot;&gt;블로그&lt;/a&gt; 가 있으니 참고하시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker에서-설치-후-실행&quot;&gt;Docker에서 설치 후 실행&lt;/h2&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker pull cassandra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;설치 후 컨테이너 실행을 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-cassandra &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; some-network &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; cassandra:tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;컨테이너 실행 후 정상 작동 확인을 위해 다음 명령어를 실행합니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &amp;lt;container name&amp;gt; cqlsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="cassandra" /><category term="docker" /><summary type="html">Cassadnra에 대한 소개 잘 정리된 블로그 가 있으니 참고하시기 바랍니다. Docker에서 설치 후 실행 $ sudo docker pull cassandra 설치 후 컨테이너 실행을 합니다. $ sudo docker run --name some-cassandra --network some-network -d cassandra:tag 컨테이너 실행 후 정상 작동 확인을 위해 다음 명령어를 실행합니다. $ sudo docker exec -it &amp;lt;container name&amp;gt; cqlsh</summary></entry><entry><title type="html">Kong 설치 및 사용 방법</title><link href="http://localhost:4000/2019/02/01/kong.html" rel="alternate" type="text/html" title="Kong 설치 및 사용 방법" /><published>2019-02-01T00:00:00+09:00</published><updated>2019-02-01T00:00:00+09:00</updated><id>http://localhost:4000/2019/02/01/kong</id><content type="html" xml:base="http://localhost:4000/2019/02/01/kong.html">&lt;h2 id=&quot;cassandra-vs-postgres&quot;&gt;Cassandra vs Postgres&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Kong을 사용하기 위해 2가지의 database를 선택해야 하는데 거기에 앞서 간단하게 비교를 해보겠습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Cassandra&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Postgres&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;NoSQL에 적합&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;RDB에 적합&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;ACID 제공 x&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;ACID 제공&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저는 NoSQL이 편하고 로그의 성질상 데이터의 중요도가 조금 떨어지는 편이기 때문에 ACID를 추구하기보다 퍼포먼스를 추구하는 것이 더 효율적이라 생각하여 Cassandra로 설치를 진행 할 예정입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker-위에-설치&quot;&gt;Docker 위에 설치&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a Docker network
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker network create kong-net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start your database&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="kong" /><category term="docker" /><category term="cassandra" /><summary type="html">Cassandra vs Postgres Kong을 사용하기 위해 2가지의 database를 선택해야 하는데 거기에 앞서 간단하게 비교를 해보겠습니다. Cassandra Postgres NoSQL에 적합 RDB에 적합 ACID 제공 x ACID 제공 저는 NoSQL이 편하고 로그의 성질상 데이터의 중요도가 조금 떨어지는 편이기 때문에 ACID를 추구하기보다 퍼포먼스를 추구하는 것이 더 효율적이라 생각하여 Cassandra로 설치를 진행 할 예정입니다. Docker 위에 설치 Create a Docker network $ docker network create kong-net Start your database</summary></entry><entry><title type="html">ELK SSL 적용 (v 7.1.0)</title><link href="http://localhost:4000/2019/01/21/elk_ssl_setting.html" rel="alternate" type="text/html" title="ELK SSL 적용 (v 7.1.0)" /><published>2019-01-21T00:00:00+09:00</published><updated>2019-01-21T00:00:00+09:00</updated><id>http://localhost:4000/2019/01/21/elk_ssl_setting</id><content type="html" xml:base="http://localhost:4000/2019/01/21/elk_ssl_setting.html">&lt;h2 id=&quot;기본-설치-및-실행-centos-7-환경&quot;&gt;기본 설치 및 실행 (CentOS 7 환경)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;설치는 기존 설치 포스팅을 참고하여 7버전에 맞는 repo파일만 변경하여 그대로 따라하시면 됩니다.&lt;/li&gt;
  &lt;li&gt;/etc/elasticsearch/elasticsearch.yml 파일에 아래 설정을 추가합니다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;192&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;168&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;151&lt;/span&gt;[자신의 &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;]
&lt;span class=&quot;c&quot;&gt;#network.host: 192.168.0.1
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;9200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;ver 7부터는 network.host가 아닌 http.host로 자신의 ip값을 주어야 binding이 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;/etc/kibana/kibana.yml 파일에 아래 설정을 추가합니다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;5601&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.151&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# kibana server ip를 입력하시면 됩니다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt;: [&lt;span class=&quot;s2&quot;&gt;&quot;http://&amp;lt;elasticsearch http ip&amp;gt;:9200&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 설정들을 모두 마치고 재실행을 해보시면 elastic search와 kibana가 정상적으로 작동함을 확인 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;elastic-search-node간의-tls-통신-적용&quot;&gt;Elastic search node간의 TLS 통신 적용&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/es_transport_ssl_impostor.png&quot; width=&quot;500px&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약, 동일한 클러스터에 속한 노드들 사이의 통신을 암호화 하지 않는다면 impostor가 다른 노드들을 속이고 정보를 빼내갈 수 있습니다. 따라서 노드들 간의 암호화를 해주어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/es_transport_ssl.png&quot; width=&quot;500px&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;암호화를 하기 위해 CA를 생성해야 되고 인증서를 발급 받아야 합니다. x-pack 유료 버전으로 이용가능 했던 것들이 7.1 버전 이후 무료로 사용이 가능하게 되었고 bin폴더 안에 관련 프로그램들이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ca-생성&quot;&gt;CA 생성&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /usr/share/elasticsearch/bin/elasticsearch-certutil ca
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;암호 입력에 관한 질문이 나오면 암호를 입력하지 않고 엔터로 넘어갑니다.&lt;/li&gt;
  &lt;li&gt;그러면 elastic-stack-ca.p12 파일이 생성 될 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;인증서-발급&quot;&gt;인증서 발급&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; /usr/share/elasticsearch/bin/elasticsearch-certutil cert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; /path/to/your/ca
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CA를 생성할때 입력한 암호, 인증서에 들어갈 암호를 중간에 입력해야 하지만 엔터로 넘어갑니다.&lt;/li&gt;
  &lt;li&gt;그러면 elastic-certificates.p12라는 파일이 생성 될 것입니다.&lt;/li&gt;
  &lt;li&gt;만들어진 인증서를 /etc/elasticsearch/ 밑으로 복사를 하신 후 아래 명령어로 권한 설정을 바꿔줍니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; chmod 444 elastic-certificates.p12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;elasticsearch.yml 파일에 다음의 코드를 추가합니다.
    &lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;xpack.security.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.verification_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;certificate &lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.keystore.path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elastic-certificates.p12&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.keystore.password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.truststore.path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elastic-certificates.p12&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.truststore.password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;OpenSSL로 인증서를 사용할 시에는 다음 코드를 elasticsearch.yml 파일에 추가 후 그 다음 명령어를 실행합니다.
    &lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;xpack.security.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.verification_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;certificate&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client.key&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client.crt&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.transport.ssl.certificate_authorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;root.crt&quot; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /usr/share/elastic/bin/elasticsearch-keystore add xpack.security.transport.ssl.secure_key_passphrase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;코드 추가 후 elastic search를 재실행 시키시면 노드들 간의 TLS 적용이 완료 되었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;role-based-access-control-적용&quot;&gt;Role-Based Access Control 적용&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/es_block_unauthroized_access.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RBAC를 통해 클러스터 접근에 제한을 둘 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/es_roll_based.png&quot; width=&quot;500px&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RBAC는 위와 같은 구조를 지녔습니다.&lt;/li&gt;
  &lt;li&gt;노드 간의 TLS 적용이 선행되어야 하고 TLS적용이 되었으면 아래 명령어를 실행시킵니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 후 y를 누르면 다음과 같이 자동으로 계정 생성과 비밀번호를 console창에 보여줍니다.
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apm_system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apm_system&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;H4jKTN0LMgvK9QYiOvk9&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kibana&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kibana&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;PhIrfPkcCxVdgj0EkcQY&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logstash_system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logstash_system&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;rxHIJuxgmQjFhsGYBgfZ&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beats_system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beats_system&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;i79rCxJ4MwdVIfnXygzo&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_monitoring_user&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_monitoring_user&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;b6d1Pap8i1BRWX5uW0co&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elastic&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elastic&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;WRrHZzliTHMxKrdQnRSN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;kibana.yml 파일에서 위의 비밀번호를 복사하여 추가해줍니다.
    &lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;elasticsearch.username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;kibana&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;elasticsearch.password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;PhIrfPkcCxVdgj0EkcQY&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;elastic search와 kibana를 다시 실행시키고 위의 id에서 elastic으로 접속을 하시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;https-적용&quot;&gt;HTTPS 적용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;elasticsearch.yml에 다음 코드를 추가합니다.
    &lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;xpack.security.http.ssl.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.http.ssl.keystore.path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elastic-certificates.p12&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.http.ssl.keystore.password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.http.ssl.truststore.path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elastic-certificates.p12&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;xpack.security.http.ssl.truststore.password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;&quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;kibana는 .p12 포맷을 지원하지 않기에 http 인증서를 발급 받기 위해 pem형식을 추출해야 합니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; /usr/share/elasticsearch/bin/elasticsearch-certutil cert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; /path/to/your/ca &lt;span class=&quot;nt&quot;&gt;--pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이후 생성된 key를 /etc/kibana로 옮긴 후 kibana.yml에 다음 코드를 추가합니다.&lt;/p&gt;

    &lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;elasticsearch.hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[&quot;https://&amp;lt;your_elasticsearch_host&amp;gt;:9200&quot;]&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;server.ssl.enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;server.ssl.key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;/path/to/your/key&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;server.ssl.certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;/path/to/your/crt&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;elasticsearch.ssl.verificationMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;elastic search와 kibana를 재 실행 후 https로 접속하면 모두 적용 된 것을 확인 하실 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="SSL" /><category term="ELK" /><summary type="html">기본 설치 및 실행 (CentOS 7 환경) 설치는 기존 설치 포스팅을 참고하여 7버전에 맞는 repo파일만 변경하여 그대로 따라하시면 됩니다. /etc/elasticsearch/elasticsearch.yml 파일에 아래 설정을 추가합니다. http.host: 192.168.0.151[자신의 ip] #network.host: 192.168.0.1 http.port: 9200 ver 7부터는 network.host가 아닌 http.host로 자신의 ip값을 주어야 binding이 됩니다. /etc/kibana/kibana.yml 파일에 아래 설정을 추가합니다. server.port: 5601 server.host: &quot;192.168.0.151&quot; # kibana server ip를 입력하시면 됩니다. elasticsearch.hosts: [&quot;http://&amp;lt;elasticsearch http ip&amp;gt;:9200&quot;] 위의 설정들을 모두 마치고 재실행을 해보시면 elastic search와 kibana가 정상적으로 작동함을 확인 할 수 있습니다. Elastic search node간의 TLS 통신 적용 만약, 동일한 클러스터에 속한 노드들 사이의 통신을 암호화 하지 않는다면 impostor가 다른 노드들을 속이고 정보를 빼내갈 수 있습니다. 따라서 노드들 간의 암호화를 해주어야 합니다. 암호화를 하기 위해 CA를 생성해야 되고 인증서를 발급 받아야 합니다. x-pack 유료 버전으로 이용가능 했던 것들이 7.1 버전 이후 무료로 사용이 가능하게 되었고 bin폴더 안에 관련 프로그램들이 있습니다. CA 생성 $ /usr/share/elasticsearch/bin/elasticsearch-certutil ca 암호 입력에 관한 질문이 나오면 암호를 입력하지 않고 엔터로 넘어갑니다. 그러면 elastic-stack-ca.p12 파일이 생성 될 것입니다. 인증서 발급 # /usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca /path/to/your/ca CA를 생성할때 입력한 암호, 인증서에 들어갈 암호를 중간에 입력해야 하지만 엔터로 넘어갑니다. 그러면 elastic-certificates.p12라는 파일이 생성 될 것입니다. 만들어진 인증서를 /etc/elasticsearch/ 밑으로 복사를 하신 후 아래 명령어로 권한 설정을 바꿔줍니다. $ chmod 444 elastic-certificates.p12 elasticsearch.yml 파일에 다음의 코드를 추가합니다. xpack.security.enabled: true xpack.security.transport.ssl.enabled: true xpack.security.transport.ssl.verification_mode: certificate xpack.security.transport.ssl.keystore.path: elastic-certificates.p12 xpack.security.transport.ssl.keystore.password: &quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot; xpack.security.transport.ssl.truststore.path: elastic-certificates.p12 xpack.security.transport.ssl.truststore.password: &quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot; OpenSSL로 인증서를 사용할 시에는 다음 코드를 elasticsearch.yml 파일에 추가 후 그 다음 명령어를 실행합니다. xpack.security.enabled: true xpack.security.transport.ssl.enabled: true xpack.security.transport.ssl.verification_mode: certificate xpack.security.transport.ssl.key: client.key xpack.security.transport.ssl.certificate: client.crt xpack.security.transport.ssl.certificate_authorities: &quot;root.crt&quot; $ /usr/share/elastic/bin/elasticsearch-keystore add xpack.security.transport.ssl.secure_key_passphrase 코드 추가 후 elastic search를 재실행 시키시면 노드들 간의 TLS 적용이 완료 되었습니다. Role-Based Access Control 적용 RBAC를 통해 클러스터 접근에 제한을 둘 수 있습니다. RBAC는 위와 같은 구조를 지녔습니다. 노드 간의 TLS 적용이 선행되어야 하고 TLS적용이 되었으면 아래 명령어를 실행시킵니다. $ /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto 실행 후 y를 누르면 다음과 같이 자동으로 계정 생성과 비밀번호를 console창에 보여줍니다. Changed password for user apm_system PASSWORD apm_system = H4jKTN0LMgvK9QYiOvk9 Changed password for user kibana PASSWORD kibana = PhIrfPkcCxVdgj0EkcQY Changed password for user logstash_system PASSWORD logstash_system = rxHIJuxgmQjFhsGYBgfZ Changed password for user beats_system PASSWORD beats_system = i79rCxJ4MwdVIfnXygzo Changed password for user remote_monitoring_user PASSWORD remote_monitoring_user = b6d1Pap8i1BRWX5uW0co Changed password for user elastic PASSWORD elastic = WRrHZzliTHMxKrdQnRSN kibana.yml 파일에서 위의 비밀번호를 복사하여 추가해줍니다. elasticsearch.username: &quot;kibana&quot; elasticsearch.password: &quot;PhIrfPkcCxVdgj0EkcQY&quot; elastic search와 kibana를 다시 실행시키고 위의 id에서 elastic으로 접속을 하시면 됩니다. HTTPS 적용 elasticsearch.yml에 다음 코드를 추가합니다. xpack.security.http.ssl.enabled: true xpack.security.http.ssl.keystore.path: elastic-certificates.p12 xpack.security.http.ssl.keystore.password: &quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot; xpack.security.http.ssl.truststore.path: elastic-certificates.p12 xpack.security.http.ssl.truststore.password: &quot;인증서 생성시 암호가 있을 시에 추가합니다.&quot; kibana는 .p12 포맷을 지원하지 않기에 http 인증서를 발급 받기 위해 pem형식을 추출해야 합니다. $ /usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca /path/to/your/ca --pem 이후 생성된 key를 /etc/kibana로 옮긴 후 kibana.yml에 다음 코드를 추가합니다. elasticsearch.hosts: [&quot;https://&amp;lt;your_elasticsearch_host&amp;gt;:9200&quot;] server.ssl.enabled: true server.ssl.key: /path/to/your/key server.ssl.certificate: /path/to/your/crt elasticsearch.ssl.verificationMode: none elastic search와 kibana를 재 실행 후 https로 접속하면 모두 적용 된 것을 확인 하실 수 있습니다.</summary></entry><entry><title type="html">Logstash 설명 및 간단 사용법</title><link href="http://localhost:4000/2019/01/20/logstash.html" rel="alternate" type="text/html" title="Logstash 설명 및 간단 사용법" /><published>2019-01-20T00:00:00+09:00</published><updated>2019-01-20T00:00:00+09:00</updated><id>http://localhost:4000/2019/01/20/logstash</id><content type="html" xml:base="http://localhost:4000/2019/01/20/logstash.html">&lt;h2 id=&quot;logstash란&quot;&gt;Logstash란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다양한 형태의 데이터를 동시에 수집하여 가공처리 한 이후 원하는 저장소로 전달하는 프로그램&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logstash의-3요소&quot;&gt;Logstash의 3요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;input: 데이터를 수집하는 소스가 어디있는지(데이터가 유입되는 근원지)&lt;/li&gt;
  &lt;li&gt;filter: 데이터를 어떻게 가공할 것인지(데이터에 변형을 가함)&lt;/li&gt;
  &lt;li&gt;output: 데이터를 어디로 보낼 것인지(데이터를 전송할 목적지)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logstash-setting-files&quot;&gt;Logstash setting files&lt;/h2&gt;

&lt;p&gt;yml 파일에 직접 들어가면 관련 정보들이 주석으로 잘 설명 되어 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;logstash.yml&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;pipeline.batch.size: 동시에 들어오는 데이터들을 몇개씩 묶어서 필터에 보낼 것인지.&lt;/li&gt;
      &lt;li&gt;pipeline.batch.delay: 만든 배치들을 목적지에 전송한 다음, 다음 이벤트를 기다리는 딜레이(ms단위)&lt;/li&gt;
      &lt;li&gt;pipeline.workers: 하나의 작업에 쓰일 CPU core의 숫자.&lt;/li&gt;
      &lt;li&gt;path.config: pipeline에 관한 config가 있는 위치 지정.&lt;/li&gt;
      &lt;li&gt;config.reload.automatic: 기본값음 false로 되어 있지만 true로 바꾸면 pipeline에 관한 yml파일이 수정될때마다 자동으로 감지해서 적용시켜준다. 이게 false면 설정값을 바꿀때마다 logstash를 재시작해야된다.&lt;/li&gt;
      &lt;li&gt;config.reload.interval: 몇초 간격으로 pipeline 설정값이 바뀌었는지 check하는 시간.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;log4j2.properties&lt;/em&gt;: logstash의 출력을 담당&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pipelines.yml&lt;/em&gt;: 기본적으로 logstash.yml파일로 config설정이 되지만 여러개의 pipelines이 존재할 때에는 여기에서 id에 따라 다르게 config를 설정할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-logstash&quot;&gt;Hello Logstash&lt;/h2&gt;

&lt;p&gt;./bin/logstash -d “input{ stdin { } } output{ stdout { } }”
실행 후 아무 글자나 타이핑 한 후 엔터치면 화면에 그대로 출력되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;logstash-conf-file&quot;&gt;Logstash conf file&lt;/h2&gt;

&lt;p&gt;실행: ./bin/logstash -f &lt;conf 파일=&quot;&quot; PATH=&quot;&quot;&gt; ex) ./bin/logstash -f ./conf/logstash-sample.conf
설정값을 다루는 yml파일과는 다르게 conf파일은 logstash의 메인 함수격이다.
config 파일을 수정하지 않고는 logstash가 제대로 작동하지 않는다.&lt;/conf&gt;&lt;/p&gt;

&lt;p&gt;다음의 예제로 설명하도록 하겠다.
각 플러그인 및 자세한 내용들은 &lt;a href=&quot;https://www.elastic.co/guide/en/logstash/master/index.html&quot;&gt;공식 홈페이지&lt;/a&gt; 에서 확인하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/secui-*.log&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;read&quot;&lt;/span&gt;
  }
}

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;] =~ /\[&lt;span class=&quot;n&quot;&gt;device_allow&lt;/span&gt;\] \[(.*?)\](.*?),/ {
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s1&quot;&gt;'\[device_allow\] \[(%{DATA:device_ip})\](%{DATA:log_create_time}),(%{DATA:log_end_time}),(?:.*?),(?:.*?),(%{DATA:policy_id}),(?:.*?),(%{DATA:source_ip}),(?:.*?),(%{DATA:source_port}),(%{DATA:destination_ip}),(%{DATA:destination_port}),(%{DATA:service}),'&lt;/span&gt;}
    }
    &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt; }
      &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;log_type&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;traffic&quot;&lt;/span&gt; }
    }
  }&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;] =~ /\[&lt;span class=&quot;n&quot;&gt;device_deny&lt;/span&gt;\] \[(.*?)\](.*?),/ {
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s1&quot;&gt;'\[device_deny\] \[(%{DATA:device_ip})\](%{DATA:log_create_time}),(%{DATA:log_end_time}),(?:.*?),(?:.*?),(%{DATA:policy_id}),(?:.*?),(%{DATA:source_ip}),(?:.*?),(%{DATA:source_port}),(%{DATA:destination_ip}),(%{DATA:destination_port}),(%{DATA:service}),'&lt;/span&gt;}
    }
    &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;action&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deny&quot;&lt;/span&gt; }
      &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;log_type&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;traffic&quot;&lt;/span&gt; }
    }
  }&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;] =~ /\[&lt;span class=&quot;n&quot;&gt;audit&lt;/span&gt;\] \[(?&amp;lt;&lt;span class=&quot;n&quot;&gt;device_ip&lt;/span&gt;&amp;gt;.*?)\](?&amp;lt;&lt;span class=&quot;n&quot;&gt;log_create_time&lt;/span&gt;&amp;gt;.*?),(?&amp;lt;&lt;span class=&quot;n&quot;&gt;device_name&lt;/span&gt;&amp;gt;.*?),(?&amp;lt;&lt;span class=&quot;n&quot;&gt;modify_user&lt;/span&gt;&amp;gt;.*?),(?&amp;lt;&lt;span class=&quot;n&quot;&gt;modefy_user_ip&lt;/span&gt;&amp;gt;.*?),(?:.*?),(?:.*?),&lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;/ {
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s1&quot;&gt;'\[audit\] \[(?&amp;lt;device_ip&amp;gt;.*?)\](?&amp;lt;log_create_time&amp;gt;.*?),(?&amp;lt;device_name&amp;gt;.*?),(?&amp;lt;modify_user&amp;gt;.*?),(?&amp;lt;modefy_user_ip&amp;gt;.*?),(?:.*?),(?:.*?),firewall apply'&lt;/span&gt;}
    }
    &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;log_type&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;audit&quot;&lt;/span&gt; }
    }
  }&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;{
    &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; {}
  }
  &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;remove_field&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;s2&quot;&gt;&quot;@version&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;] }

  &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-dd HH:mm:ss&quot;&lt;/span&gt;]
    &lt;span class=&quot;n&quot;&gt;remove_field&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;
  }
}

&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; =&amp;gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt;
  }
  &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt;{
    &lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.151:9200&quot;&lt;/span&gt;]	
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{+YYYY.MM.dd}-%{device_ip}-%{log_type}-log&quot;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;input&quot;&gt;input&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;input으로 file plugin을 사용해서 file을 불러들일 것이다.&lt;/li&gt;
  &lt;li&gt;path는 리눅스 기준으로 설정을 하고 파일 이름들은 secui-에 해당하는 모든 로그 파일들을 읽어들인다.&lt;/li&gt;
  &lt;li&gt;mode는 file plugin에서 tail과 read가 있는데 그 중에서 read를 선택할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filter&quot;&gt;filter&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;if문으로 각 파일로 읽어들인 message를 선별한다.&lt;/li&gt;
  &lt;li&gt;grok plugin을 사용하여 DATA:지어지고 싶은 필드명 으로 정규식구조에 해당하는 것들에 각자의 field명을 붙여준다.
    &lt;ul&gt;
      &lt;li&gt;grok
구조가 없는 log data를 파싱하여서 구조화를 만들고 쿼리 가능하도록 만들 때 사용하는 플러그인
syslog logs, apache, other webserver logs, mysql logs, 사람이 만든 log등을 가공할때 적합하다.&lt;/li&gt;
      &lt;li&gt;dissect
grok plugin과 비슷할 수 있지만 이거는 delimiter를 사용해서 data를 구조화 시킨다.
반복적이면서 delimiter로 구분이 잘 되어 있는 형태의 input에는 잘 작동하지만 다양한 가능성이 있는 input들은 grok가 더 빠르고 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;mutate를 통해 output으로 보낼 data에 field를 추가하거나 삭제하는 등의 가공을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;output&quot;&gt;output&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;logstash의 화면으로 직접 보기 위해 stdout으로 출력한다.&lt;/li&gt;
  &lt;li&gt;이 때 codec을 써서 루비 디버그 형식의 아웃풋으로 본다.&lt;/li&gt;
  &lt;li&gt;logstash는 동시에 input과 output 출력이 가능하므로 stdout뿐만 아니라 elastic search에도 같은 자료를 보낸다.&lt;/li&gt;
  &lt;li&gt;elastic search에 보낼때에는 bulk api를 사용해서 보내진다.
    &lt;ul&gt;
      &lt;li&gt;http로 통신을 하기 때문에 성공을 하면 200이 오고 실패하면 다른 코드로 반환된다.&lt;/li&gt;
      &lt;li&gt;맵핑이 실패되어서 데이터가 loss되면 404에러를 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;logstash가 데이터를 수집하는 그 시점의 시간을 timestamp로 나오는데 @timestamp대신해서 찍어주는게 date 필터이다.&lt;/p&gt;

&lt;p&gt;curl localhost:9600/_node?pretty로 하면 로그스태쉬의 상태 정보를 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;logstash에서-elastic-search로-올릴-때-mapping-문제&quot;&gt;Logstash에서 elastic search로 올릴 때 mapping 문제&lt;/h2&gt;

&lt;p&gt;Logstash에서 mapping을 해서 elastic search에 실을수는 없고 kibana dev tool혹은 curl을 통해서 elastic search에다가 미리 template을 만들어 놓고
앞으로 올라갈 index들이 자동으로 그 template에 의해 mapping이 되도록 설정하는 방법이다.&lt;/p&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PUT&lt;/span&gt; /&lt;span class=&quot;err&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;secui&lt;/span&gt;
{
  &lt;span class=&quot;s2&quot;&gt;&quot;index_patterns&quot;&lt;/span&gt; : [
    &lt;span class=&quot;s2&quot;&gt;&quot;2019.*&quot;&lt;/span&gt;
  ],
  &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt; : {
    &lt;span class=&quot;s2&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
  },
  &lt;span class=&quot;s2&quot;&gt;&quot;mappings&quot;&lt;/span&gt;: {
    &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;s2&quot;&gt;&quot;actions&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt; : {
        &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt; : {
          &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;keyword&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;ignore_above&quot;&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;256&lt;/span&gt;
        }
      }
    },
    &lt;span class=&quot;s2&quot;&gt;&quot;destination_ip&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;s2&quot;&gt;&quot;destination_port&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;s2&quot;&gt;&quot;device_ip&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;s2&quot;&gt;&quot;log_create_time&quot;&lt;/span&gt; : {
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;format&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;index_patterns에 우리가 앞으로 올릴 index 패턴을 정해주면 거기에 해당하는 index들은 자동으로 template의 설정대로 mapping혹은 setting이 된다.&lt;/p&gt;

&lt;p&gt;여기에서 index는 elastic search에 넣을 index 이름을 의미하고
template_name은 어떤 template를 가져다 쓸 것인가를 의미하고
manage_template는 기본 true로 되어 있지만 우리가 쓰고자 하는 template을 쓸 때에는 false로 바꿔줘야한다.&lt;/p&gt;</content><author><name>Hyo-Eun Choi</name><email>hchoi53@gmail.com</email></author><category term="logstash" /><category term="ELK" /><summary type="html">Logstash란? 다양한 형태의 데이터를 동시에 수집하여 가공처리 한 이후 원하는 저장소로 전달하는 프로그램 Logstash의 3요소 input: 데이터를 수집하는 소스가 어디있는지(데이터가 유입되는 근원지) filter: 데이터를 어떻게 가공할 것인지(데이터에 변형을 가함) output: 데이터를 어디로 보낼 것인지(데이터를 전송할 목적지) Logstash setting files yml 파일에 직접 들어가면 관련 정보들이 주석으로 잘 설명 되어 있다. logstash.yml pipeline.batch.size: 동시에 들어오는 데이터들을 몇개씩 묶어서 필터에 보낼 것인지. pipeline.batch.delay: 만든 배치들을 목적지에 전송한 다음, 다음 이벤트를 기다리는 딜레이(ms단위) pipeline.workers: 하나의 작업에 쓰일 CPU core의 숫자. path.config: pipeline에 관한 config가 있는 위치 지정. config.reload.automatic: 기본값음 false로 되어 있지만 true로 바꾸면 pipeline에 관한 yml파일이 수정될때마다 자동으로 감지해서 적용시켜준다. 이게 false면 설정값을 바꿀때마다 logstash를 재시작해야된다. config.reload.interval: 몇초 간격으로 pipeline 설정값이 바뀌었는지 check하는 시간. log4j2.properties: logstash의 출력을 담당 pipelines.yml: 기본적으로 logstash.yml파일로 config설정이 되지만 여러개의 pipelines이 존재할 때에는 여기에서 id에 따라 다르게 config를 설정할 수 있다. Hello Logstash ./bin/logstash -d “input{ stdin { } } output{ stdout { } }” 실행 후 아무 글자나 타이핑 한 후 엔터치면 화면에 그대로 출력되는 것을 볼 수 있다. Logstash conf file 실행: ./bin/logstash -f ex) ./bin/logstash -f ./conf/logstash-sample.conf 설정값을 다루는 yml파일과는 다르게 conf파일은 logstash의 메인 함수격이다. config 파일을 수정하지 않고는 logstash가 제대로 작동하지 않는다. 다음의 예제로 설명하도록 하겠다. 각 플러그인 및 자세한 내용들은 공식 홈페이지 에서 확인하면 된다. input { file { path =&amp;gt; &quot;/var/log/secui-*.log&quot; mode =&amp;gt; &quot;read&quot; } } filter { if [message] =~ /\[device_allow\] \[(.*?)\](.*?),/ { grok { match =&amp;gt; {&quot;message&quot; =&amp;gt; '\[device_allow\] \[(%{DATA:device_ip})\](%{DATA:log_create_time}),(%{DATA:log_end_time}),(?:.*?),(?:.*?),(%{DATA:policy_id}),(?:.*?),(%{DATA:source_ip}),(?:.*?),(%{DATA:source_port}),(%{DATA:destination_ip}),(%{DATA:destination_port}),(%{DATA:service}),'} } mutate { add_field =&amp;gt; { &quot;action&quot; =&amp;gt; &quot;Allow&quot; } add_field =&amp;gt; { &quot;log_type&quot; =&amp;gt; &quot;traffic&quot; } } }else if [message] =~ /\[device_deny\] \[(.*?)\](.*?),/ { grok { match =&amp;gt; {&quot;message&quot; =&amp;gt; '\[device_deny\] \[(%{DATA:device_ip})\](%{DATA:log_create_time}),(%{DATA:log_end_time}),(?:.*?),(?:.*?),(%{DATA:policy_id}),(?:.*?),(%{DATA:source_ip}),(?:.*?),(%{DATA:source_port}),(%{DATA:destination_ip}),(%{DATA:destination_port}),(%{DATA:service}),'} } mutate { add_field =&amp;gt; { &quot;action&quot; =&amp;gt; &quot;Deny&quot; } add_field =&amp;gt; { &quot;log_type&quot; =&amp;gt; &quot;traffic&quot; } } }else if [message] =~ /\[audit\] \[(?&amp;lt;device_ip&amp;gt;.*?)\](?&amp;lt;log_create_time&amp;gt;.*?),(?&amp;lt;device_name&amp;gt;.*?),(?&amp;lt;modify_user&amp;gt;.*?),(?&amp;lt;modefy_user_ip&amp;gt;.*?),(?:.*?),(?:.*?),firewall apply/ { grok { match =&amp;gt; {&quot;message&quot; =&amp;gt; '\[audit\] \[(?&amp;lt;device_ip&amp;gt;.*?)\](?&amp;lt;log_create_time&amp;gt;.*?),(?&amp;lt;device_name&amp;gt;.*?),(?&amp;lt;modify_user&amp;gt;.*?),(?&amp;lt;modefy_user_ip&amp;gt;.*?),(?:.*?),(?:.*?),firewall apply'} } mutate { add_field =&amp;gt; { &quot;log_type&quot; =&amp;gt; &quot;audit&quot; } } }else{ drop {} } mutate { remove_field =&amp;gt; [ &quot;@version&quot;, &quot;host&quot;, &quot;message&quot;] } date { match =&amp;gt; [&quot;timestamp&quot;, &quot;YYYY-MM-dd HH:mm:ss&quot;] remove_field =&amp;gt; &quot;timestamp&quot; } } output { stdout { codec =&amp;gt; rubydebug } elasticsearch{ hosts =&amp;gt; [&quot;192.168.0.151:9200&quot;] index =&amp;gt; &quot;%{+YYYY.MM.dd}-%{device_ip}-%{log_type}-log&quot; } } input input으로 file plugin을 사용해서 file을 불러들일 것이다. path는 리눅스 기준으로 설정을 하고 파일 이름들은 secui-에 해당하는 모든 로그 파일들을 읽어들인다. mode는 file plugin에서 tail과 read가 있는데 그 중에서 read를 선택할 것이다. filter if문으로 각 파일로 읽어들인 message를 선별한다. grok plugin을 사용하여 DATA:지어지고 싶은 필드명 으로 정규식구조에 해당하는 것들에 각자의 field명을 붙여준다. grok 구조가 없는 log data를 파싱하여서 구조화를 만들고 쿼리 가능하도록 만들 때 사용하는 플러그인 syslog logs, apache, other webserver logs, mysql logs, 사람이 만든 log등을 가공할때 적합하다. dissect grok plugin과 비슷할 수 있지만 이거는 delimiter를 사용해서 data를 구조화 시킨다. 반복적이면서 delimiter로 구분이 잘 되어 있는 형태의 input에는 잘 작동하지만 다양한 가능성이 있는 input들은 grok가 더 빠르고 좋다. mutate를 통해 output으로 보낼 data에 field를 추가하거나 삭제하는 등의 가공을 한다. output logstash의 화면으로 직접 보기 위해 stdout으로 출력한다. 이 때 codec을 써서 루비 디버그 형식의 아웃풋으로 본다. logstash는 동시에 input과 output 출력이 가능하므로 stdout뿐만 아니라 elastic search에도 같은 자료를 보낸다. elastic search에 보낼때에는 bulk api를 사용해서 보내진다. http로 통신을 하기 때문에 성공을 하면 200이 오고 실패하면 다른 코드로 반환된다. 맵핑이 실패되어서 데이터가 loss되면 404에러를 보낸다. logstash가 데이터를 수집하는 그 시점의 시간을 timestamp로 나오는데 @timestamp대신해서 찍어주는게 date 필터이다. curl localhost:9600/_node?pretty로 하면 로그스태쉬의 상태 정보를 볼 수 있다. Logstash에서 elastic search로 올릴 때 mapping 문제 Logstash에서 mapping을 해서 elastic search에 실을수는 없고 kibana dev tool혹은 curl을 통해서 elastic search에다가 미리 template을 만들어 놓고 앞으로 올라갈 index들이 자동으로 그 template에 의해 mapping이 되도록 설정하는 방법이다. PUT /_template/secui { &quot;index_patterns&quot; : [ &quot;2019.*&quot; ], &quot;settings&quot; : { &quot;number_of_shards&quot; : 1, &quot;number_of_replicas&quot; : 0 }, &quot;mappings&quot;: { &quot;@timestamp&quot; : { &quot;type&quot; : &quot;date&quot; }, &quot;actions&quot; : { &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : { &quot;keyword&quot; : { &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 256 } } }, &quot;destination_ip&quot; : { &quot;type&quot; : &quot;ip&quot; }, &quot;destination_port&quot; : { &quot;type&quot; : &quot;integer&quot; }, &quot;device_ip&quot; : { &quot;type&quot; : &quot;ip&quot; }, &quot;log_create_time&quot; : { &quot;type&quot; : &quot;date&quot;, &quot;format&quot; : &quot;yyyy-MM-dd HH:mm:ss&quot; } } } index_patterns에 우리가 앞으로 올릴 index 패턴을 정해주면 거기에 해당하는 index들은 자동으로 template의 설정대로 mapping혹은 setting이 된다. 여기에서 index는 elastic search에 넣을 index 이름을 의미하고 template_name은 어떤 template를 가져다 쓸 것인가를 의미하고 manage_template는 기본 true로 되어 있지만 우리가 쓰고자 하는 template을 쓸 때에는 false로 바꿔줘야한다.</summary></entry></feed>